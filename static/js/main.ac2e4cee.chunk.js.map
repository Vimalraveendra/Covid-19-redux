{"version":3,"sources":["Redux/CountrySelector/CountrySelector.types.js","Redux/CovidCard/CovidCard.types.js","Redux/CovidCard/CovidCard.actions.js","Redux/CountrySelector/countrySelector.selector.js","Components/CountrySelector/CountrySelector.jsx","Redux/CountrySelector/CountrySelector.actions.js","Redux/CovidCard/CovidCard.selector.js","Components/CovidCard/CovidCard.jsx","Components/PieChart/PieChart.jsx","Containers/App.js","serviceWorker.js","Redux/CountrySelector/CountrySelector.reducer.js","Redux/CovidCard/CovidCard.reducer.js","Redux/rootReducer.js","Api/Api.js","Redux/CovidCard/CovidCard.sagas.js","Redux/CountrySelector/CountrySelector.sagas.js","Redux/rootSaga.js","Redux/store.js","index.js","Components/CountrySelector/CountrySelector.module.css","Components/CovidCard/CovidCard.module.css","Containers/App.module.css","Components/PieChart/PieChart.module.css"],"names":["CountrySelectorActionTypes","REQUEST_COUNTRY_DATA_START","REQUEST_COUNTRY_DATA_SUCCESS","REQUEST_COUNTRY_DATA_FAILED","HANDLE_COUNTRY_CHANGE","CovidCardActionTypes","REQUEST_DATA_START","REQUEST_DATA_SUCCESS","REQUEST_DATA_FAILED","fetchedDataStart","country","type","payload","selectCountries","state","countries","selectSelectedCountries","createSelector","selectedCountries","selectCountry","CountrySelector","this","props","fetchedCountries","handleCountry","fetchedData","className","styles","container","cx","selector","option","onChange","e","target","value","map","index","name","key","React","Component","mapStateToProps","createStructuredSelector","connect","dispatch","event","selectDataArray","dataArray","data","mapStateToPros","confirmed","deaths","recovered","lastUpdate","card","infected","content","start","end","duration","separator","count","Date","toDateString","pieChart","labels","datasets","label","backgroundColor","options","legend","display","title","text","length","piechart","App","fetchDataAPI","Boolean","window","location","hostname","match","initialState","isPending","error","Country","combineReducers","action","url","fetchData","a","changeableUrl","axios","get","modifiedData","console","log","fetchCountryData","watchFetchData","call","response","put","takeLatest","fetchedCountriesStartAsync","watchFetchCountries","rootSaga","all","fork","sagaMiddleware","createSagaMiddleware","middleWares","logger","store","createStore","rootReducer","applyMiddleware","run","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.ac2e4cee.chunk.js","sourcesContent":["const CountrySelectorActionTypes = {\n  REQUEST_COUNTRY_DATA_START: \"REQUEST_COUNTRY_DATA_START\",\n  REQUEST_COUNTRY_DATA_SUCCESS: \"REQUEST_COUNTRY_DATA_SUCCESS\",\n  REQUEST_COUNTRY_DATA_FAILED: \"REQUEST_COUNTRY_DATA_FAILED\",\n  HANDLE_COUNTRY_CHANGE: \"HANDLE_COUNTRY_CHANGE\",\n};\n\nexport default CountrySelectorActionTypes;\n","const CovidCardActionTypes = {\n  REQUEST_DATA_START: \"REQUEST_DATA_START\",\n  REQUEST_DATA_SUCCESS: \"REQUEST_DATA_SUCCESS\",\n  REQUEST_DATA_FAILED: \"REQUEST_DATA_FAILED\",\n};\n\nexport default CovidCardActionTypes;\n","import CovidCardActionTypes from \"./CovidCard.types\";\n// import { fetchData } from \"../../Api/Api\";\n\nexport const fetchedDataStart = (country) => ({\n  type: CovidCardActionTypes.REQUEST_DATA_START,\n  payload: country,\n});\n\nexport const fetchedDataSuccess = (data) => ({\n  type: CovidCardActionTypes.REQUEST_DATA_SUCCESS,\n  payload: data,\n});\n\nexport const fetchedDataFailed = (error) => ({\n  type: CovidCardActionTypes.REQUEST_DATA_FAILED,\n  payload: error,\n});\n\n// export const fetchedData = (country) => async (dispatch) => {\n//   dispatch(fetchDataStart());\n//   try {\n//     const response = await fetchData(country);\n//     dispatch(fetchDataSuccess(response));\n//   } catch (error) {\n//     dispatch(fetchDataFailed(error));\n//   }\n// };\n","import { createSelector } from \"reselect\";\n\nconst selectCountries = (state) => state.countries;\n\nexport const selectSelectedCountries = createSelector(\n  [selectCountries],\n  (countries) => countries.selectedCountries\n);\n\nexport const selectCountry = createSelector(\n  [selectCountries],\n  (countries) => countries.country\n);\n","import React from \"react\";\nimport styles from \"./CountrySelector.module.css\";\nimport cx from \"classnames\";\n\nimport { connect } from \"react-redux\";\nimport { fetchedCountriesStart } from \"../../Redux/CountrySelector/CountrySelector.actions\";\n\nimport { handleCountry } from \"../../Redux/CountrySelector/CountrySelector.actions\";\nimport { fetchedDataStart } from \"../../Redux/CovidCard/CovidCard.actions\";\n\nimport { createStructuredSelector } from \"reselect\";\nimport {\n  selectSelectedCountries,\n  selectCountry,\n} from \"../../Redux/CountrySelector/countrySelector.selector\";\n\nclass CountrySelector extends React.Component {\n  componentDidMount() {\n    this.props.fetchedCountries();\n  }\n  render() {\n    const { handleCountry, selectedCountries, fetchedData } = this.props;\n\n    return (\n      <div className={styles.container}>\n        <select\n          className={cx(styles.selector, styles.option)}\n          onChange={(e) => {\n            handleCountry(e);\n            fetchedData(e.target.value);\n          }}\n        >\n          <option className={styles.option} value=\"\">\n            Select Country\n          </option>\n          {selectedCountries.map(({ name }, index) => (\n            <option key={index} value={name}>\n              {name}\n            </option>\n          ))}\n        </select>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = createStructuredSelector({\n  selectedCountries: selectSelectedCountries,\n  country: selectCountry,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  handleCountry: (e) => dispatch(handleCountry(e.target.value)),\n  fetchedCountries: () => dispatch(fetchedCountriesStart()),\n  fetchedData: (country) => dispatch(fetchedDataStart(country)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CountrySelector);\n","import CountrySelectorActionTypes from \"./CountrySelector.types\";\n// import { fetchCountryData } from \"../../Api/Api\";\n// fetching the country name whenever the user changes\n\nexport const handleCountry = (event) => ({\n  type: CountrySelectorActionTypes.HANDLE_COUNTRY_CHANGE,\n  payload: event,\n});\n// fetching of country data started\nexport const fetchedCountriesStart = () => ({\n  type: CountrySelectorActionTypes.REQUEST_COUNTRY_DATA_START,\n});\n\n// fetching of country data success\nexport const fetchedCountriesSuccess = (data) => ({\n  type: CountrySelectorActionTypes.REQUEST_COUNTRY_DATA_SUCCESS,\n  payload: data,\n});\n\n// fetching of country data failed\nexport const fetchedCountriesFailed = (error) => ({\n  type: CountrySelectorActionTypes.REQUEST_COUNTRY_DATA_FAILED,\n  payload: error,\n});\n\n// dispatching the fetchedCountries function to redux-thunk\n// redux-thunk intercept the function & invoke the function\n//whenever its gets a dispatch inside of this action function\n// then its going to dispatch the actual action to the reducer\n// first time thunk gets dispatch(fetchCountriesPending()) i.e\n//in our case the action is REQUEST_COUNTRY_DATA_PENDING & so on\n\n// export const fetchedCountries = () => async (dispatch) => {\n//   dispatch(fetchedCountriesStart());\n//   try {\n//     const response = await fetchCountryData();\n//     dispatch(fetchedCountriesSuccess(response));\n//   } catch (error) {\n//     dispatch(fetchedCountriesFailed(error));\n//   }\n// };\n","import { createSelector } from \"reselect\";\n\nconst selectData = (state) => state.dataArray;\n\nexport const selectDataArray = createSelector(\n  [selectData],\n  (dataArray) => dataArray.data\n);\n","import React from \"react\";\nimport styles from \"./CovidCard.module.css\";\nimport CountUp from \"react-countup\";\nimport cx from \"classnames\";\n\nimport { connect } from \"react-redux\";\n\nimport { createStructuredSelector } from \"reselect\";\nimport { selectDataArray } from \"../../Redux/CovidCard/CovidCard.selector\";\n\nconst CovidCard = ({ data: { confirmed, deaths, recovered, lastUpdate } }) => {\n  if (!confirmed) {\n    return \"Loading...\";\n  }\n  return (\n    <div className={styles.container}>\n      <div className={cx(styles.card, styles.infected)}>\n        <div className={styles.content}>\n          <h3>Infected</h3>\n          <CountUp\n            start={0}\n            end={confirmed.value}\n            duration={2.75}\n            separator=\",\"\n            className={styles.count}\n          />\n          <h4>{new Date(lastUpdate).toDateString()}</h4>\n          <p>Total number of confirmed cases of COVID-19</p>\n        </div>\n      </div>\n      <div className={cx(styles.card, styles.recovered)}>\n        <div className={styles.content}>\n          <h3>Recovered</h3>\n          <CountUp\n            start={0}\n            end={recovered.value}\n            duration={2.75}\n            separator=\",\"\n            className={styles.count}\n          />\n          <h4>{new Date(lastUpdate).toDateString()}</h4>\n          <p>Total number of recovered cases from COVID-19</p>\n        </div>\n      </div>\n      <div className={cx(styles.card, styles.deaths)}>\n        <div className={styles.content}>\n          <h3>Deaths</h3>\n          <CountUp\n            start={0}\n            end={deaths.value}\n            duration={2.75}\n            separator=\",\"\n            className={styles.count}\n          />\n          <h4>{new Date(lastUpdate).toDateString()}</h4>\n          <p>Total number of deaths cases caused by COVID-19</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToPros = createStructuredSelector({\n  data: selectDataArray,\n});\nexport default connect(mapStateToPros)(CovidCard);\n","import React from \"react\";\nimport { Pie } from \"react-chartjs-2\";\nimport styles from \"./PieChart.module.css\";\n\nimport { connect } from \"react-redux\";\n\nimport { createStructuredSelector } from \"reselect\";\nimport { selectDataArray } from \"../../Redux/CovidCard/CovidCard.selector\";\nimport { selectCountry } from \"../../Redux/CountrySelector/countrySelector.selector\";\n\nconst PieChart = ({ data: { confirmed, recovered, deaths }, country }) => {\n  const pieChart = confirmed ? (\n    <Pie\n      data={{\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\n        datasets: [\n          {\n            label: \"People\",\n            backgroundColor: [\n              \"rgba( 0,255,0,0.5)\",\n              \"rgba(0,0,255,0.5)\",\n              \"rgba(255,0,0,0.8)\",\n            ],\n            data: [confirmed.value, recovered.value, deaths.value],\n          },\n        ],\n      }}\n      options={{\n        legend: { display: false },\n        title: {\n          display: true,\n          text:\n            `${country}` === \"undefined\" || `${country}`.length === 0\n              ? `Current status in the World`\n              : `Current status in ${country}`,\n        },\n      }}\n    />\n  ) : null;\n  return <div className={styles.piechart}>{pieChart}</div>;\n};\n\nconst mapStateToProps = createStructuredSelector({\n  data: selectDataArray,\n  country: selectCountry,\n});\nexport default connect(mapStateToProps)(PieChart);\n","import React from \"react\";\n\nimport styles from \"./App.module.css\";\nimport CountrySelector from \"../Components/CountrySelector/CountrySelector\";\nimport CovidCard from \"../Components/CovidCard/CovidCard\";\nimport PieChart from \"../Components/PieChart/PieChart\";\n\nimport { connect } from \"react-redux\";\n\nimport { fetchedDataStart } from \"../Redux/CovidCard/CovidCard.actions\";\nimport { createStructuredSelector } from \"reselect\";\nimport { selectDataArray } from \"../Redux/CovidCard/CovidCard.selector\";\n\nclass App extends React.Component {\n  componentDidMount() {\n    const { fetchDataAPI } = this.props;\n    fetchDataAPI();\n  }\n\n  render() {\n    const { data } = this.props;\n    return !data ? (\n      <div>\n        <h2>Loading...</h2>\n      </div>\n    ) : (\n      <div className={styles.App}>\n        <h1>COVID-19</h1>\n        <CountrySelector />\n        <hr />\n        <CovidCard />\n        <PieChart />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = createStructuredSelector({\n  data: selectDataArray,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchDataAPI: () => dispatch(fetchedDataStart()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import CountrySelectorActionTypes from \"./CountrySelector.types\";\n\nexport const initialState = {\n  selectedCountries: [],\n  isPending: false,\n  error: \"\",\n  Country: \"\",\n};\n\nexport const countrySelectorReducer = (state = initialState, action = {}) => {\n  switch (action.type) {\n    case CountrySelectorActionTypes.REQUEST_COUNTRY_DATA_START:\n      return {\n        ...state,\n        isPending: true,\n      };\n\n    case CountrySelectorActionTypes.REQUEST_COUNTRY_DATA_SUCCESS:\n      return {\n        ...state,\n        isPending: false,\n        selectedCountries: action.payload,\n      };\n\n    case CountrySelectorActionTypes.REQUEST_COUNTRY_DATA_FAILED:\n      return {\n        ...state,\n        isPending: false,\n        error: action.payload,\n      };\n\n    case CountrySelectorActionTypes.HANDLE_COUNTRY_CHANGE:\n      return {\n        ...state,\n        country: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n","import CovidCardActionTypes from \"./CovidCard.types\";\n\nconst initialState = {\n  data: {},\n  isPending: false,\n  error: \"\",\n};\n\nexport const covidCardReducer = (state = initialState, action = {}) => {\n  switch (action.type) {\n    case CovidCardActionTypes.REQUEST_DATA_START:\n      return {\n        ...state,\n        isPending: true,\n      };\n    case CovidCardActionTypes.REQUEST_DATA_SUCCESS:\n      return {\n        ...state,\n        isPending: false,\n        data: action.payload,\n      };\n    case CovidCardActionTypes.REQUEST_DATA_FAILED:\n      return {\n        ...state,\n        isPending: false,\n        error: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\nimport { countrySelectorReducer } from \"./CountrySelector/CountrySelector.reducer\";\nimport { covidCardReducer } from \"./CovidCard/CovidCard.reducer\";\n\nexport default combineReducers({\n  countries: countrySelectorReducer,\n  dataArray: covidCardReducer,\n});\n","import axios from \"axios\";\n\nconst url = \"https://covid19.mathdro.id/api\";\n\nexport const fetchData = async (country) => {\n  let changeableUrl = url;\n  if (country) {\n    changeableUrl = `${url}/countries/${country}`;\n  }\n  try {\n    const {\n      data: { confirmed, deaths, recovered, lastUpdate },\n    } = await axios.get(changeableUrl);\n\n    const modifiedData = {\n      confirmed,\n      deaths,\n      recovered,\n      lastUpdate,\n    };\n    return modifiedData;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchCountryData = async () => {\n  try {\n    const {\n      data: { countries },\n    } = await axios.get(`${url}/countries`);\n\n    return countries;\n  } catch (error) {\n    console.log(error);\n  }\n};\n","import { takeLatest, put, call } from \"redux-saga/effects\";\n\nimport CovidCardActionTypes from \"./CovidCard.types\";\n\nimport { fetchedDataSuccess, fetchedDataFailed } from \"./CovidCard.actions\";\nimport { fetchData } from \"../../Api/Api\";\n\n// fetching asynchronous action using redux-sagas\n\nexport function* fetchedDataStart(action) {\n  try {\n    const response = yield call(fetchData, action.payload);\n    yield put(fetchedDataSuccess(response));\n  } catch (error) {\n    yield put(fetchedDataFailed(error));\n  }\n}\n\nexport function* watchFetchData() {\n  yield takeLatest(CovidCardActionTypes.REQUEST_DATA_START, fetchedDataStart);\n}\n","import { takeLatest, put, call } from \"redux-saga/effects\";\n\nimport CountrySelectorActionTypes from \"./CountrySelector.types\";\nimport { fetchCountryData } from \"../../Api/Api\";\n\nimport {\n  fetchedCountriesSuccess,\n  fetchedCountriesFailed,\n} from \"./CountrySelector.actions\";\n\nexport function* fetchedCountriesStartAsync() {\n  try {\n    // yield keyword is similar to await keyword its intercepts execution.\n    const response = yield call(fetchCountryData);\n    // oR\n    //const response = yield fetchData() avoid using call effects\n    // put affect is used to dispatch actions to reducer\n    yield put(fetchedCountriesSuccess(response));\n  } catch (error) {\n    yield put(fetchedCountriesFailed(error));\n  }\n}\nexport function* watchFetchCountries() {\n  yield takeLatest(\n    CountrySelectorActionTypes.REQUEST_COUNTRY_DATA_START,\n    fetchedCountriesStartAsync\n  );\n}\n","import { all, fork } from \"redux-saga/effects\";\nimport { watchFetchData } from \"./CovidCard/CovidCard.sagas\";\nimport { watchFetchCountries } from \"./CountrySelector/CountrySelector.sagas\";\n\nexport function* rootSaga() {\n  //Fork performs a non-blocking operation on the function passed.\n  // Call runs a function. If it returns a promise, pauses the saga\n  // until the promise is resolved.\n  yield all([fork(watchFetchData), fork(watchFetchCountries)]);\n}\n","import { createStore, applyMiddleware } from \"redux\";\nimport rootReducer from \"./rootReducer\";\nimport logger from \"redux-logger\";\n// import thunk from \"redux-thunk\";\nimport createSagaMiddleware from \"redux-saga\";\n\nimport { rootSaga } from \"./rootSaga\";\nconst sagaMiddleware = createSagaMiddleware();\nconst middleWares = [sagaMiddleware, logger];\n\nconst store = createStore(rootReducer, applyMiddleware(...middleWares));\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./Containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport store from \"./Redux/store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CountrySelector_container__13VQS\",\"selector\":\"CountrySelector_selector__A-oXX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CovidCard_container__3D-UL\",\"card\":\"CovidCard_card__MJmYs\",\"content\":\"CovidCard_content__3_0o-\",\"infected\":\"CovidCard_infected__2rLcQ\",\"recovered\":\"CovidCard_recovered__1S1zo\",\"deaths\":\"CovidCard_deaths__3f02v\",\"count\":\"CovidCard_count__3q486\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__19NVA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"piechart\":\"PieChart_piechart__1grXd\"};"],"sourceRoot":""}